const express = require('express');
const cors = require('cors');
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const os = require('os');

const app = express();
const PORT = process.env.PORT || 7860; // Hugging Face Spaces s·ª≠ d·ª•ng port 7860

// Middleware
app.use(cors());
app.use(express.json());

// Serve static files (for demo.html)
app.use(express.static(__dirname));

// T·∫°o th∆∞ m·ª•c downloads n·∫øu ch∆∞a t·ªìn t·∫°i v·ªõi fallback cho container
let downloadsDir;

// Th·ª≠ t·∫°o th∆∞ m·ª•c downloads trong app directory
try {
    downloadsDir = path.join(__dirname, 'downloads');
    if (!fs.existsSync(downloadsDir)) {
        fs.mkdirSync(downloadsDir, { recursive: true });
    }
    // Test write permission
    const testFile = path.join(downloadsDir, 'test_write.tmp');
    fs.writeFileSync(testFile, 'test');
    fs.unlinkSync(testFile);
} catch (error) {
    // N·∫øu kh√¥ng th·ªÉ t·∫°o trong app dir, d√πng temp directory
    console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ ghi v√†o th∆∞ m·ª•c app, s·ª≠ d·ª•ng temp directory');
    downloadsDir = path.join(os.tmpdir(), 'ytdlp_downloads');
    if (!fs.existsSync(downloadsDir)) {
        fs.mkdirSync(downloadsDir, { recursive: true });
    }
}

console.log(`üìÅ Th∆∞ m·ª•c downloads: ${downloadsDir}`);

// Auto-cleanup function - x√≥a file sau 5 ph√∫t
function scheduleFileCleanup(filePath, delay = 5 * 60 * 1000) { // 5 ph√∫t
    setTimeout(() => {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            console.log(`üóëÔ∏è ƒê√£ x√≥a file: ${path.basename(filePath)}`);
        }
    }, delay);
}

// Generate unique ID for files
function generateFileId() {
    return crypto.randomBytes(8).toString('hex');
}

// Route ƒë·ªÉ l·∫•y th√¥ng tin video
app.post('/video-info', async (req, res) => {
    const { url } = req.body;
    
    if (!url) {
        return res.status(400).json({ error: 'URL l√† b·∫Øt bu·ªôc' });
    }

    const command = `yt-dlp --dump-json "${url}"`;
    
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error('L·ªói:', error);
            return res.status(500).json({ error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video', details: stderr });
        }
        
        try {
            const videoInfo = JSON.parse(stdout);
            res.json({
                title: videoInfo.title,
                duration: videoInfo.duration,
                uploader: videoInfo.uploader,
                view_count: videoInfo.view_count,
                thumbnail: videoInfo.thumbnail,
                formats: videoInfo.formats.map(format => ({
                    format_id: format.format_id,
                    ext: format.ext,
                    resolution: format.resolution,
                    filesize: format.filesize,
                    quality: format.quality
                }))
            });
        } catch (parseError) {
            res.status(500).json({ error: 'L·ªói ph√¢n t√≠ch d·ªØ li·ªáu video' });
        }
    });
});

// Route ƒë·ªÉ t·∫£i video
app.post('/download', async (req, res) => {
    const { url, format = 'video', quality = 'best' } = req.body;
    
    if (!url) {
        return res.status(400).json({ error: 'URL l√† b·∫Øt bu·ªôc' });
    }

    // T·∫°o ID duy nh·∫•t cho file
    const fileId = generateFileId();
    const timestamp = Date.now();
    
    let command;
    let expectedExtension;
    
    if (format === 'audio') {
        // T·∫£i audio
        expectedExtension = 'mp3';
        const outputTemplate = path.join(downloadsDir, `${fileId}.%(ext)s`);
        command = `yt-dlp -x --audio-format mp3 --audio-quality ${quality} -o "${outputTemplate}" "${url}"`;
    } else {
        // T·∫£i video v·ªõi format selection t·ªëi ∆∞u
        expectedExtension = 'mp4';
        const outputTemplate = path.join(downloadsDir, `${fileId}.%(ext)s`);
        
        // X·ª≠ l√Ω format selection ƒë·ªÉ tr√°nh warning
        let formatFlag = '';
        if (quality === 'best') {
            formatFlag = ''; // Kh√¥ng c·∫ßn -f flag, ƒë·ªÉ yt-dlp t·ª± ch·ªçn best
        } else if (quality === 'worst') {
            formatFlag = '-f "worst"';
        } else {
            formatFlag = `-f "bestvideo[height<=${quality.replace('p', '')}]+bestaudio/best[height<=${quality.replace('p', '')}]"`;
        }
        
        command = `yt-dlp ${formatFlag} -o "${outputTemplate}" "${url}"`.replace(/\s+/g, ' ').trim();
    }
    
    console.log('ƒêang th·ª±c thi l·ªánh:', command);
    
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error('L·ªói t·∫£i xu·ªëng:', error);
            return res.status(500).json({ error: 'Kh√¥ng th·ªÉ t·∫£i video', details: stderr });
        }
        
        console.log('K·∫øt qu·∫£:', stdout);
        
        // T√¨m file ƒë√£ t·∫£i v·ªõi fileId
        const files = fs.readdirSync(downloadsDir).filter(file => 
            file.startsWith(fileId)
        );
        
        if (files.length > 0) {
            const downloadedFile = files[0];
            const filePath = path.join(downloadsDir, downloadedFile);
            const stats = fs.statSync(filePath);
            
            // L√™n l·ªãch x√≥a file sau 5 ph√∫t
            scheduleFileCleanup(filePath);
            
            // L·∫•y th√¥ng tin video ƒë·ªÉ tr·∫£ v·ªÅ
            const getVideoInfoCommand = `yt-dlp --dump-json --no-download "${url}"`;
            exec(getVideoInfoCommand, (infoError, infoStdout) => {
                let videoInfo = null;
                if (!infoError) {
                    try {
                        videoInfo = JSON.parse(infoStdout);
                    } catch (e) {
                        console.log('Kh√¥ng th·ªÉ parse th√¥ng tin video');
                    }
                }
                
                res.json({
                    success: true,
                    message: 'T·∫£i video th√†nh c√¥ng',
                    fileId: fileId,
                    filename: downloadedFile,
                    originalTitle: videoInfo?.title || 'Unknown',
                    size: stats.size,
                    format: format,
                    quality: quality,
                    duration: videoInfo?.duration || null,
                    thumbnail: videoInfo?.thumbnail || null,
                    uploader: videoInfo?.uploader || null,
                    download_url: `/download-file/${downloadedFile}`,
                    direct_link: `${req.protocol}://${req.get('host')}/download-file/${downloadedFile}`,
                    expires_in: '5 ph√∫t',
                    created_at: new Date().toISOString()
                });
            });
        } else {
            res.status(500).json({ error: 'Kh√¥ng t√¨m th·∫•y file ƒë√£ t·∫£i' });
        }
    });
});

// Route ƒë·ªÉ t·∫£i file ƒë√£ download
app.get('/download-file/:filename', (req, res) => {
    const { filename } = req.params;
    const filePath = path.join(downloadsDir, filename);
    
    if (fs.existsSync(filePath)) {
        res.download(filePath);
    } else {
        res.status(404).json({ error: 'File kh√¥ng t·ªìn t·∫°i' });
    }
});

// Route ƒë·ªÉ li·ªát k√™ c√°c file ƒë√£ t·∫£i (b·ªè route n√†y)
// app.get('/downloads', (req, res) => {
//     const files = fs.readdirSync(downloadsDir).map(filename => {
//         const filePath = path.join(downloadsDir, filename);
//         const stats = fs.statSync(filePath);
//         return {
//             filename,
//             size: stats.size,
//             created: stats.birthtime,
//             download_url: `/download-file/${filename}`
//         };
//     });
//     
//     res.json(files);
// });

// Route ƒë·ªÉ x√≥a file
app.delete('/delete/:filename', (req, res) => {
    const { filename } = req.params;
    const filePath = path.join(downloadsDir, filename);
    
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        res.json({ success: true, message: 'ƒê√£ x√≥a file th√†nh c√¥ng' });
    } else {
        res.status(404).json({ error: 'File kh√¥ng t·ªìn t·∫°i' });
    }
});

// Route ki·ªÉm tra tr·∫°ng th√°i
app.get('/status', (req, res) => {
    exec('yt-dlp --version', (error, stdout, stderr) => {
        if (error) {
            res.json({ 
                status: 'error', 
                message: 'yt-dlp kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông',
                error: error.message 
            });
        } else {
            res.json({ 
                status: 'ok', 
                message: 'API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
                yt_dlp_version: stdout.trim()
            });
        }
    });
});

// Route m·∫∑c ƒë·ªãnh - redirect to demo
app.get('/', (req, res) => {
    res.redirect('/demo.html');
});

// API info route
app.get('/api', (req, res) => {
    res.json({
        message: 'YouTube Downloader API',
        version: '2.0.0',
        endpoints: {
            'GET /status': 'Ki·ªÉm tra tr·∫°ng th√°i API',
            'POST /video-info': 'L·∫•y th√¥ng tin video (body: {url})',
            'POST /download': 'T·∫£i video (body: {url, format?, quality?})',
            'GET /downloads': 'Li·ªát k√™ c√°c file ƒë√£ t·∫£i',
            'GET /download-file/:filename': 'T·∫£i file ƒë√£ download',
            'DELETE /delete/:filename': 'X√≥a file'
        },
        demo: 'http://localhost:' + PORT + '/demo.html'
    });
});

app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ YouTube Downloader API ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    console.log(`üì± Giao di·ªán web: http://localhost:${PORT}`);
    console.log(`üìÅ Th∆∞ m·ª•c t·∫£i xu·ªëng: ${downloadsDir}`);
});
