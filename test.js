// Test script cho YouTube Downloader API
const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000';

// H√†m test ki·ªÉm tra tr·∫°ng th√°i
async function testStatus() {
    console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i API...');
    try {
        const response = await fetch(`${API_BASE}/status`);
        const data = await response.json();
        console.log('‚úÖ K·∫øt qu·∫£:', data);
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

// H√†m test l·∫•y th√¥ng tin video
async function testVideoInfo(url) {
    console.log('\nüìã L·∫•y th√¥ng tin video...');
    try {
        const response = await fetch(`${API_BASE}/video-info`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ url })
        });
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Th√¥ng tin video:');
            console.log(`   Ti√™u ƒë·ªÅ: ${data.title}`);
            console.log(`   K√™nh: ${data.uploader}`);
            console.log(`   Th·ªùi l∆∞·ª£ng: ${Math.floor(data.duration / 60)}:${(data.duration % 60).toString().padStart(2, '0')}`);
            console.log(`   L∆∞·ª£t xem: ${data.view_count?.toLocaleString() || 'N/A'}`);
            console.log(`   S·ªë ƒë·ªãnh d·∫°ng: ${data.formats?.length || 0}`);
        } else {
            console.error('‚ùå L·ªói:', data.error);
        }
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

// H√†m test t·∫£i video
async function testDownload(url, format = 'video', quality = 'worst') {
    console.log('\n‚¨áÔ∏è T·∫£i video...');
    try {
        const response = await fetch(`${API_BASE}/download`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ url, format, quality })
        });
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ T·∫£i th√†nh c√¥ng:');
            console.log(`   File: ${data.filename}`);
            console.log(`   Link t·∫£i: ${API_BASE}${data.download_url}`);
        } else {
            console.error('‚ùå L·ªói:', data.error);
        }
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

// H√†m test li·ªát k√™ file
async function testListDownloads() {
    console.log('\nüìÅ Li·ªát k√™ file ƒë√£ t·∫£i...');
    try {
        const response = await fetch(`${API_BASE}/downloads`);
        const files = await response.json();
        
        if (files.length === 0) {
            console.log('üìÇ Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c t·∫£i v·ªÅ');
        } else {
            console.log('üìÇ Danh s√°ch file:');
            files.forEach((file, index) => {
                const size = (file.size / (1024 * 1024)).toFixed(2);
                console.log(`   ${index + 1}. ${file.filename} (${size} MB)`);
            });
        }
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

// Ch·∫°y test
async function runTests() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test YouTube Downloader API\n');
    
    // Test URL m·∫´u (video ng·∫Øn)
    const testUrl = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ';
    
    await testStatus();
    await testVideoInfo(testUrl);
    
    // Uncomment d√≤ng d∆∞·ªõi ƒë·ªÉ test t·∫£i video (ch·ªâ n√™n test v·ªõi video ng·∫Øn)
    // await testDownload(testUrl, 'video', 'worst');
    
    await testListDownloads();
    
    console.log('\n‚ú® Ho√†n th√†nh test!');
}

// Ch·∫°y n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = {
    testStatus,
    testVideoInfo,
    testDownload,
    testListDownloads
};
